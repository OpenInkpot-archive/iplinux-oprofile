Edited output from :

oprofpp -l /lib/modules/2.4.0-ac12/oprofile/oprofile.o

oprof_hash_map_mmap[0x00001bb8]: 0.0049% (4 samples)
oprof_output_map[0x00002030]: 0.0110% (9 samples)
is_ready[0x000008ac]: 0.0147% (12 samples)
oprof_read[0x000008e4]: 0.0477% (39 samples)
my_sys_init_module[0x00002390]: 0.1468% (120 samples)
my_sys_fork[0x00002288]: 0.4037% (330 samples)
out_mmap[0x00002174]: 0.4110% (336 samples)
oprof_put_mapping[0x000006f8]: 1.6356% (1337 samples)
my_sys_mmap2[0x000021a8]: 2.1640% (1769 samples)
do_path_hash[0x00001f98]: 2.7206% (2224 samples)
my_sys_execve[0x00002110]: 2.9604% (2420 samples)
my_sys_exit[0x000023d8]: 3.0546% (2497 samples)
oprof_output_maps[0x000020a0]: 4.3757% (3577 samples)
oprof_put_note[0x00000824]: 4.7281% (3865 samples)
my_old_mmap[0x00002204]: 4.8553% (3969 samples)
pmc_stop[0x000005d0]: 5.7654% (4713 samples)
my_sys_clone[0x00002338]: 7.0878% (5794 samples)
oprof_thread[0x000005ec]: 10.6855% (8735 samples)
my_sys_vfork[0x000022e0]: 12.5254% (10239 samples)
do_hash[0x00001c88]: 36.4018% (29757 samples)

This shows that by far our biggest overhead is calculating
the dentry tree hash structure (do_hash()). The alternative
(namely mapping inode nr's into files in userspace) would be
far worse though.

(FIXME: when I have time, write that perl script, and look at the 
assembly more closely to see if micro-optimisations can be made).
