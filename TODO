This is an (incomplete) list of some of the stuff we want to look at doing.

If you're interested in hacking on any of these, please contact the list first
for some pointers and/or read HACKING and doc/CodingStyle.

Before merging with trunk
-------------------------

[moz@lambent oprofile-pp]$ pp/opreport --include-dependent | more

odb_open() unable to resize file /var/lib/oprofile/samples/current/{root}/bin/cat/CPU_CLK_UNHALTED.50000.0.all.all.all to 2208 length, cause : Invalid argument

   - race with opcontrol --shutdown on odb_open() ?

 o  new format percent in opreport can exceed field width by at least one :

08049610 1        13            2.22786e-05 0.000289621 simple_strtoul          /usr/bin/od
080496a8 1        14            2.22786e-05 0.0003119  __do_global_dtors_aux   /bin/grep

 o default to opreport -n as discussed
 o we show a header but not column headers for image report
 o write the man page and xml doc (i'll do this right at the end - john)
 o I think we should have the ability to have *fixed* width headers, e.g. :

vma      samples  cum. samples  %           cum. %     symbol name             image name              app name
0804c350 64582    64582         35.0757     35.0757    odb_insert              /usr/loc...in/oprofiled /usr/local/oprofile-pp/bin/oprofiled

  Note the ellipsis

 o test opannotate -s -a on an application containing relative path debug
  info and profiled in another directory than the application build once.
  can objdump retrieve the source file and if no can we work-around ?
 o opannotate unhandled option (probably not exhaustive) 
   --base-dir
   --threshold
 o move oprofiled.log to OP_SAMPLE_DIR/current ?
 o mtime checking in dae is in the wrong place: we must check at each
  samples files open not at image opening
 o opd_mangle_filename() in dae/ daemon/ use create_path blindly and try to
  recreate from /var.
 o at least add some FIXME in dae/daemon (see opd_mangle_file(),
  op_mangle_file() and caller)
 o option xxx and negated option --no-xxx: we can hide them in --help and
  mention in the xxx option help string than the --no-xxx is allowed. Not
  really usefull if we have a little number of --no.
 o inhibit build of opdiff in pp/Makefile.am
 o consider to do the symbol (details too ?) sort at output, format_output receive
  a vector of symbol to consider, we can perhaps sort in format_output
 o disallow --accumulated without -l
 o opreport unhandled option (probably not exhaustive) 
  --global-percent is not handled according to pp_interface
  --sort= (?)
  --output-file filename
 o pp/opreport --merge lib /lib/i686/libc-2.3.2.so doesn't do anything when using
   separate
 o pp/opreport --merge=lib. This should give a list of all the binaries shown separately,
   including the libs, e.g.

   44 45% /bin/bash
   54 45% /lib/libc.so

   it doesn't work ...

 o opreport /usr/bin/whatever should imply -l (like oprofpp back-compat) but
  NOT if opreport <some spec> and it just *happens* to match one image. The
  same idea can be applied to remove the app_name field in output since it's
  annoying to get a report with the same application showed on each line.
	- difficult one: with -n (to be the default), it's actually useful information.
	  what to do ?

 o merging vmlinux as dependent library and as primary image
   $ pp/opreport --merge=lib -n | more
   194561  40.1204 /boot/2.5.66/vmlinux
    62102  12.8060 /boot/2.5.66/vmlinux
  The first is the dependent and merged vmlinux from all application the
  second is the default vmlinux (where we put samples when we have no owning
  application)
  I looked and got problem to fix it, I suspect by adding this constraint we
  have no longer a strict weak ordering relation and either partition_files
  must be rewritten or we must fix it in dae. It make sense to fix it in dae by
  encoding primary image as {root}/usr/bin/make/{dep}/{root}/usr/bin/make. If
  we fix it in this way I defer the fix after daemon rewrite

   - this fix is fine for me (probably better for call stacks anyway) but I'd
     prefer it to be done *before* any long-drawn daemon rewrite. A daemon rewrite
     should be an equivalent transformation IMHO otherwise we will have problems...

 o in some case (--separate=library and not using --merge=lib) we get multiple
  time error message "last modified time ... does not match ..."

 o #pp/opreport -l -p /lib/modules/2.5.69/kernel/ oprofile.ko
   No samples files found: profile specification too strict ?
   # pp/opreport -l -p /lib/modules/2.5.69/kernel/ oprofile
   No samples files found: profile specification too strict ?
   # pp/opreport -l -p /lib/modules/2.5.69/kernel/ /oprofile
   Cpu type: PIII
   ...

   It would be nice to allow at least the first alternate form.

 o fix John movement on 2.5: odb_insert failure (and message error corrupted ?)
   - haven't been able to reproduce yet, I just get too many files open instead ;)

After merging with trunk
------------------------

 o look if we must remove help_str support from libopt++
 o implement pp_interface alias
 o restore stream state when using persistant formating flag like:
     s/ostream os; os << hex << foo/os << hex << foo << dec/


Before 1.0 big stuff
--------------------

 o implement new pp spec (see specification)
 	o opcontrol should sort out the counter numbers for the user
	o thread profiling - kernel change in 2.5 to export task->tgid
	o per-cpu profiling
	o difference between two profile session. Difference must be made at source level. 
	   (This is a part of post-prof). Difference can be made also at symbols level. Important.
	o real call graph profiling. Do try locks in NMI handler to track backwards then
	   dump the trace in the logs + new sample file format
 o add support for samples not belonging to any symbols probably through
   artificially created symbols
 o get a look at missing samples, run libdb/db_test on a sample file and see
  if pp tools miss some samples. I get a deep look in opofiled, 0.5% of of
  missing sample in the .plt section, a quick look on opreport show 2% missing
 
Before 1.0 little stuff
-----------------------

 o configure.in: OP_DATADIR=`eval echo "$datadir/$PACKAGE/"`
     AC_DEFINE_UNQUOTED(OP_DATADIR, "$OP_DATADIR", "foo path") seems to work
 o improve the *non* verbose daemon log to be a bit more informative
 o daemon: opd_put_kernel_samples vs. setup_kernel_sample vs. handle_. Rename, way too confusing
 o --buffer-size is useless on 2.5 without tuning of watershed
 o should we show shared libs by default ?
 o is --reset racy ?
 o should we make the sighup handler re-read counter config and re-start profiling too ?
 o improve --smart-demangle
	o allow user to add it's own pattern in user.pat, document it.
	o hard code ${typename} regular definition to remove all current limitations (difficult, perhaps after 1.0 ?).
 o oprof_start: check lib samples when kernel samples checkbox is checked
 o "op_time" doesn't have a header !
 o document that even with the in_interrupt trick in 2.5, you can still get a few
   samples in the wrong place - interrupt code outside of the irq_enter/exit
 o look oprofiled.log statitistics if 'Nr. lost userspace samples (nil image)'
  is non-zero invetigate why.
 o implement module-drop event in 2.5 kernel
 o fix /dev/null mappings (see sf)
 o mask SIGTERM over critical daemon operations that could corrupt sample files
 o pp tools must handle samples count overflow (marked as (unsigned)-1)
 o verify if we can remove the ELF-based symbol size code
 o must we do setrlimit(RLIMIT_NOFILE, ...) for daemon ? Isn't already limited
  by the kernel itself ?
 o allow --ctr0-event to take event numbers. (is it worth ?)
 o better treatment of section /wo symbol, actually we rely on _init being
  the first symbol in the first CODE section, we would rather lookup all CODE
  section and create a symbol from the start of the section to the fist symbol
  in this section (if its size is zero don't create it)

Documentation
-------------

 o make distcheck is broken (doc subdir)
 o remove dependencies in doc for xmlt.xsl and xhtml-chunk.xls ?
 o more discussion of problematic code needs to go in the "interpreting" section. 
 o document gcc 2.95 and linenr info problems especially for inline functions
 o split doc into user's manual and hacking manual, document much more 
 o audit oprof_start for security + then document sudo

General checks to make
----------------------
 
 o check chroot() processes and the path hash stuff
 o rgrep FIXME
 o valgrind (--show-reachable=yes --leak-check=yes)
 o audit to track unnecessary include <>
 o gcc 3.0/3.x compile
 o Qt2/3 check, no Qt check
 o verify builds (modversions, kernel versions, athlon etc.). I have the
  necessary stuff to check kernel versions/configurations on PIII core (Phil)
 o use nm and a little script to track unused function
 o test it to hell and back
 o compile all C++ programs with STL_port and test them
 o There is probably place of post profile tools where looking at errno will give better error messages.

Later
-----
 
 o i18n. We need a good formatter, and also remember format_percent()
 o op_to_source --source-dir=~moz/src/oprofile/ --output-dir=op /usr/bin/oprofiled
   will fail because the ~ is not expanded (no space around it) (popt bug I say)
 o remove 1 and 2 magic numbers for oprof_ready
 o adapt Anton's patch for handling non-symbolled libraries ?
 o use standard C integer type <stdint.h> int32_t int16_t etc.
 o opcontrol --save should allow to backup binary, see subject "features to make oprofile easier to use" on mail list
 o event multiplexing for real
 
o profile the NMI handler code
 
o merge sample files into one big report (like vtune can do repeated runs)

oprof_report:

IMHO this app isn't near what we really want. There's no point doing this
GUI until we can give it some real power. Let's concentrate on making the
command-line tools as good as possible first. 
- folderview of sample files + sessions in the gui itself (later ?)
- disassembly. form "+0x8b" for intra-symbol samples optionally, on by default?
- tune and test hotspot
- source (later ?)
 
