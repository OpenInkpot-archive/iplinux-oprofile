0.1 task list
---------------

 o get symbol size via elf instead of bfd
 o add support for samples not belonging to any symbols probably through
   artificially created symbols
   these two todo are perhaps worthwhile to implement now. The new filtering
   of symbols make them less interesting.
 o --help --version in a common options section in .sgml ?
   same thing for all common options between oprofpp/op_to_source ?
 o remove note lock (and rename map lock) ... I think
 o should we pin rather than loop sample buffer overflow too ?
 o cleanup cache things in compat22.h, add and use cache_line_aligned_in_smp
 o improve format of oprofpp output etc.
 o check than all post-profiles tools show version nr in the same way and document it
 
Before 1.0
----------

 o pp rewrite ! not clear if we need to rewrite it.
 o coherent naming class conventions
 o use standard C integer type <stdint.h> int32_t int16_t etc.
	- but they are so ugly ...
 o add option to op_to_source like oprofpp -u -m on a symbol basis.
 o audit oprof_start for security...
 o review the exception table of the nmi handler (at least stop oprofile)
 o take oprof_convert out the back and do the cruel to be kind thing
 o more discussion of problematic code needs to go in the "interpreting" section. 
 o test it to hell and back
 o compile all C++ programs with STL_port and test them
 o check documentation
 o difference between two profile session. Difference must be made at source level. 
   (This is a part of post-prof). Difference can be made also at symbols level.
 o profile the NMI handler code
 o verify builds (modversions, kernel versions, athlon etc.). I have the
  necessary stuff to check kernel versions/configurations on PPro core (Phil)
 o use a filelock rather a sleep to synchronize op_start and daemon.
 o check chroot() processes and the path hash stuff
 o use nm and a little script to track unused function
 o audit to track unnecessary include <>
 o check if we can use our own RTC irq handler rather to pass through the
  the kernel service. The overhead for RTC is very big actually. Take care
  first from where come the overhead (read/write RTC CMOS is costly)
 o gcc 3.0/3.1 compile. (3.1 is not stable currently but I follow it, Phil)

Later
-----

o post-prof GUI ? (big job)
 
o merge sample files into one big report (like vtune can do repeated runs)
 
? o move .oprofile to name=value pairs to avoid conflicts on change.

o determine where we need preempt_disable/enable to prevent pre-emption + test
 
o move from racy sysctl to procfs, if it can be done nicely

o pentium 4 patches ?
 
o integrate dasm, probably the best way is to allow to fall back to objdump.

o turn (or only compile) daemon in C++ to allow more code sharing with pp/gui
  is it a good idea ?

o negative process entries in the daemon - a fork() into the pid would always succeed,
  in the meantime count the missed samples, possibly try to get info via /proc again ...

o maybe we should support a CPU mask for enabling counters (useful with
  processor pinning ?) 

o the interrupt handler code could probably be improved by moving into asm

o can we fold in the "untouched sample entry" case in hash table to another case ?
 
o we don't really need a vmlinux file during profiling ...
 
o Other x86 processors

o other processors through RTC iff we find testers
