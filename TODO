0.2
---

 o split documentation into tutorial + ref. Include /everything/ in the ref: sample format,
   logfile meanings etc. 
 o audit oprof_start for security + document sudo
 o get symbol size via elf instead of bfd
 o add support for samples not belonging to any symbols probably through
   artificially created symbols
   these two todo are perhaps worthwhile to implement now. The new filtering
   of symbols make them less interesting. - let's wait - john
 o should we pin rather than loop sample buffer overflow too ?
 o fix NGPT bug
 o difference between two profile session. Difference must be made at source level. 
   (This is a part of post-prof). Difference can be made also at symbols level.
 o determine where we need preempt_disable/enable to prevent pre-emption + test (ugh)
 o include lock metering stuff
 o consider if we can get to the new subsection 1 in 2.4.18+ via a kernel patch to
   insert the start/end (if clean, submit to linux-kernel)
 o remaining little cleanups of output format, module unloaded using of postprof etc.
 o document gcc 2.95 and linenr info problems especially for inline functions
 o check the documentation of --output-format
 o it remains probably minor bug in -c 0,1 -sort (same name for option, validation of options ...)

oprof_report:

- demangling
- folderview of sample files + sessions in the gui itself (later ?)
- disassembly. form "+0x8b" for intra-symbol samples (optionnaly)
- hotspot
- source (later ?)
 
Before 1.0
----------

 o coherent naming class conventions
 o use standard C integer type <stdint.h> int32_t int16_t etc.
	- but they are so ugly ...
 o add option to op_to_source like oprofpp -u -m on a symbol basis.
 o review the exception table of the nmi handler (at least stop oprofile)
 o take oprof_convert out the back and do the cruel to be kind thing
 o more discussion of problematic code needs to go in the "interpreting" section. 
 o use a filelock rather a sleep to synchronize op_start and daemon.
 o check chroot() processes and the path hash stuff
 o audit to track unnecessary include <>
 o check if we can use our own RTC irq handler rather to pass through the
  the kernel service. The overhead for RTC is very big actually. Take care
  first from where come the overhead (read/write RTC CMOS is costly)
 o thread profiling in the old and new flavour (2.5 introduce a new thread handling) (also
   see NGPT bug on sf)

Checks to make
--------------
 
 o gcc 3.0/3.1 compile. (3.1 is not stable currently but I follow it, Phil)
 o verify builds (modversions, kernel versions, athlon etc.). I have the
  necessary stuff to check kernel versions/configurations on PPro core (Phil)
 o use nm and a little script to track unused function
 o test it to hell and back
 o compile all C++ programs with STL_port and test them
 
Later
-----

o pp rewrite ! not clear if we need to rewrite it.
o profile the NMI handler code
o post-prof GUI ? (big job)
 
o merge sample files into one big report (like vtune can do repeated runs)
 
? o move .oprofile to name=value pairs to avoid conflicts on change.

o move from racy sysctl to procfs, if it can be done nicely

o pentium 4 patches ?
 
o integrate dasm, probably the best way is to allow to fall back to objdump.

o turn (or only compile) daemon in C++ to allow more code sharing with pp/gui
  is it a good idea ?

o negative process entries in the daemon - a fork() into the pid would always succeed,
  in the meantime count the missed samples, possibly try to get info via /proc again ...

o maybe we should support a CPU mask for enabling counters (useful with
  processor pinning ?) 

o the interrupt handler code could probably be improved by moving into asm

o can we fold in the "untouched sample entry" case in hash table to another case ?
 
o we don't really need a vmlinux file during profiling ...
 
o Other x86 processors

o other processors through RTC iff we find testers
