0.0.9 task list
---------------

 o stress test

 o user request: op_time that shows /all/ available symbols (with correct %age).
  This must handle images with no symbols, so container must contain either a symbol + values,
  or a file.
 
Before 1.0
----------

 o pp rewrite !
 o little output things (e.g. don't print unit mask) RTC
 o add option like opf_filer -u -m to oprofpp -l|-L on a symbol basis.
 o --help --version in a common options section in .sgml ?
   same thing for all common options between oprofpp/opf_filter ?
 o audit oprof_start for security...
 o review the exception table of the nmi handler (at least stop oprofile)
 o oprofile_nmi22.S and oprofile24.S can use the same code.
 o remove note lock (and rename map lock) ... I think
 o should we pin rather than loop sample buffer overflow too ?
 o take oprof_convert out the back and do the cruel to be kind thing
 o more discussion of problematic code needs to go in the "interpreting" section. 
 o test it to hell and back
 o check documentation
 o difference between two profile session. Difference must be made at source level. 
   (This is a part of post-prof)
 o improve format of oprofpp output etc.
 o profile the NMI handler code
 o verify builds (modversions, kernel versions, athlon etc.)
 o merging utility for sample files (useful)
 o post-prof GUI ? (big job)
 o use a filelock rather a sleep to synchronize op_start and daemon.
 o check chroot() processes and the path hash stuff

Later
-----

o merge sample files into one big report (like vtune can do repeated runs)
 
? o move .oprofile to name=value pairs to avoid conflicts on change.

o determine where we need ctx_sw_on/off to prevent pre-emption + test
 
o move from racy sysctl to procfs, if it can be done nicely

o pentium 4 patches ?
 
o integrate dasm, probably the best way is to allow to fall back to objdump.

o turn (or only compile) daemon in C++ to allow more code sharing with pp/gui
  is it a good idea ?

o negative process entries in the daemon - a fork() into the pid would always succeed,
  in the meantime count the missed samples, possibly try to get info via /proc again ...

o maybe we should support a CPU mask for enabling counters (useful with
  processor pinning ?) 

o the interrupt handler code could probably be improved by moving into asm

o can we fold in the "untouched sample entry" case in hash table to another case ?
 
o we don't really need a vmlinux file during profiling ...
 
o Other x86 processors
