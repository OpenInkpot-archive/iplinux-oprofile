.TH OPROFILE 1 "@DATE@" "oprofile @VERSION@"
.UC 4
.SH NAME
oprofile \- a sytem-wide profiler
.SH SYNOPSIS
.B op_start
[
.I options
]
.br
.B op_stop
.br
.B oprofpp
[
.I options
]
[ sample-file ] [ binary ]
.br
.B op_to_source
[
.I options
]
.br
.B op_time
[
.I options
]
[ samples-files-directory ]
.br
.B op_help
[ event-name ]
.br
.B oprof_convert
.br
.SH DESCRIPTION
oprofile is a profiling system for x86 systems running Linux 2.2/2.4. Profiling runs
transparently during the background, and profile data can be collected at any time. oprofile
makes use of the hardware performance counters provided on Intel P6, and AMD Athlon family processors,
and can use the RTC for profiling on othe x86 processor types.
In the following description, options that begin with ctrX- define a logical counter
number in the range 0-3 (0-1 for Intel processors, which only have two counters).
See the HTML documentation for further details.

.SH OPTIONS
.br
.B op_start options
.br
.TP
.BI "--help"
List help
.br
.TP
.BI "--list-events"
Show available events for the hardware counters
.br
.TP
.BI "--map-file " filename
specify System.map for running kernel
.br
.TP
.BI "--vmlinux " filename
specify vmlinux kernel image
.br
.TP
.BI "--ctrX-event " event_name
symbolic event name for counter X
.br
.TP
.BI "--ctrX-count " count_nr
number of events between samples for counter X
.br
.TP
.BI "--ctrX-unit-mask " unit_mask
unit mask for counter X
.br
.TP
.BI "--ctrX-kernel"
whether to count kernel events for counter X
.br
.TP
.BI "--ctrX-user"
whether to count user events for counter X
.br
.TP
.BI "--rtc-value"
RTC interrupts/second value. This is rounded up to a power of two when used.
.br
.TP
.BI "--buffer-size " nr
number of samples in kernel buffer
.br
.TP
.BI "--hash-table-size " nr
number of entries in kernel hash table
.br
.TP
.BI "--note-table-size " nr
number of entries in kernel note table
.br
.TP
.BI "--kernel-only "
profile only the kernel
.br
.TP
.BI "--pid-filter " pid
Only profile process pid
.br
.TP
.BI "--pgrp-filter " pgrp
Only profile process group pgrp
.br
.TP
.BI "--ignore-myself "
ignore samples for oprofiled
.br
.TP
.BI "--log-file " filename
specify log file
.br
.TP
.BI "--base-dir " dirname
base directory of daemon
.br
.TP
.BI "--samples-dir " dirname
output samples directory
.br
.TP
.BI "--device-file " filename
profile device file
.br
.TP
.BI "--hash-map-device-file " filename
profile hash map device file
.br
.TP
.BI "--separate-samples "
separate samples for each distinct application. With this option, samples
in shared libraries are stored in a separate sample file specific to the
primate binary image (e.g. /bin/cp) that the code is mapped into. This feature
is not supported for process-context kernel samples, and incurs a performance
penalty.
.br
.TP
.BI "--verbose"
be verbose in the daemon log
.PP
.br
.B oprofpp options
.br
.TP
.BI "--help -? --usage"
Show help message
.br
.TP
.BI "--samples-file " filename ", -f "filename
image sample file
.br
.TP
.BI "--image-file " filename ", -i "filename
image file
.br
.TP
.BI "--list-symbols -l"
list samples by symbol
.br
.TP
.BI "--dump-gprof-file " filename ", -g "filename
dump gprof format file
.br
.TP
.BI "--list-symbol " name ", -s "name
give detailed samples for the symbol name
.br
.TP
.BI "--base-dir " directory_name ", -b "directory_name
.br
.TP
.BI "--list-all-symbols-details -L"
give detailed samples for all symbols
.br
.TP
.BI "--output-linenr-info -o"
output filename:linenr info for all samples, usable only with --list-all-symbols-details, --list-symbol and --list-symbols
.br
.TP
.BI "--demangle -d"
demangle GNU C++ symbol names
.br
.TP
.BI "--counter " counter_nr ", -c "counter_nr
which counter to use
.br
.TP
.BI "--version -v"
show version
.br
.TP
.BI "--verbose -V"
verbose output
.br
.TP
.BI "--exclude-symbol " symbol ", -e "symbol
exclude list of comma separated symbol
.br
.TP
.BI "--base-dir " dir_name ", -b "dirname
base directory of profile daemon
.PP
.br
.BI "--show-shared-libs -h"
Show the details for each shared lib which belongs to one application. This option is useful only if you have profiled with --separate-samples option and you specify on the oprofpp command line either --list-symbols or --list-all-symbols-details.
.TP
.br
.B op_to_source options
.br
.TP
.BI "--help -? --usage"
Show help message
.br
.TP
.BI "--samples-file " filename ", -f "filename
image sample file
.br
.TP
.BI "--image-file " filename ", -i "filename
image file
.br
.TP
.BI "--demangle -d"
demangle GNU C++ symbol names
.br
.TP
.BI "--assembly -a"
output assembly code
.br
.TP
.BI "--source-dir " base_directory
if you request for annotated source this option give the base directory where
come the source file. All source file outside this base directory are ignored
.br
.TP
.BI "--output-dir " base_directory
output base directory where annotated source file are generated. If you do not
specify --source-dir neither --output-dir annotated source file go to stdout
.br
.TP
.BI "--output " patterns
if you request for annotated source this option give a list of patterns separated by "," so only source filename that match one of this pattern are output.
This option have no effect if --source-dir or --output-dir have not been set.
.br
.TP
.BI "--no-output " patterns
filename matched by the --output option can be filtered by one of the patterns given with this option.
.br
.TP
.BI "--source-with-assembly -s"
output assembly mixed with source file
.br
.TP
.BI "--until-more-than-samples " percent_nr ", -m "percent_nr
output source files until the amount of samples in these files reach percent_nr samples
.br
.TP
.BI "--with-more-than-samples " percent_nr ", -w "percent_nr
output source files which contains more than percent_nr samples
.br
.TP
.BI "--sort-by-counter " counter_nr ", -c "counter_nr
which counter to use for sorting purposes
.br
.TP
.BI "--version -v"
show version
.br
.TP
.BI "--verbose -V"
verbose output
.br
.TP
.BI "--exclude-symbol " symbol ", -e "symbol
exclude list of comma separated symbol
.br
.TP
.BI "--base-dir " dirname ", -b "dirname
base directory of profile daemon
.br
.TP
.B op_time options
.br
.TP
.BI "--help -? --usage"
Show help message
.TP
.br
.BI "--use-counter " counter_nr ", -c "counter_nr
which counter to use for sorting purposes
.TP
.br
.BI "--show-shared-libs -h"
Show the details for each shared lib which belongs to one application. This option is usefull only if you have profiled with --separate-samples option
.TP
.br
.BI "--reverse -r"
sort output by increasing count of samples rather by decreasing count of samples
.TP
.br
.B oprof_convert filename [filenames]
The oprof_convert utility is only needed when upgrading the profiler version. Further details
can be found in the HTML documentation.

.SH USAGE
Start the profiler with the provided
.B op_start
shell script. You are required to specify vmlinux and System.map, as well as specify a counter event and value, e.g. :
.PP
.I op_start --vmlinux=/sys/vmlinux --map-file=/sys/System.map --ctr0-event=CPU_CLK_UNHALTED --ctr0-count=600000
.PP
If you are using a machine that doesn't support the performance counters, you can use the RTC driver instead, e.g. :
.PP
.I op_start   --vmlinux=/sys/vmlinux --map-file=/sys/System.map --rtc-value=128
.PP
Profiles will be collected every ten minutes. You can force a collection at any time :
.PP
.I op_dump
.PP
As an alternative you can use the
.B oprof_start
gui to start the profiler. See the HTML documentation for further details
.PP
You can then collect profiles for any binary or shared library by using
.B oprofpp
to read the sample file :
.PP
.I oprofpp -l /lib/libc-2.1.92.so
.PP
or by using :
.B op_to_source
.PP
.I op_to_source -i /lib/libc-2.1.92.so
.PP
.B op_time
utility can be usefull to get an overall of all profiled applications.
.PP
.SH ENVIRONMENT
No environment variables are recognised by oprofile.

.SH FILES
.TP
.I /var/opd/oprofiled.log
The user-space daemon logfile.
.TP
.I /var/opd/opdev, /var/opd/ophashmapdev, /var/opd/opnotedev
The device files for communication with the kernel module.
.TP
.I /var/opd/samples/
The location of the generated sample files.

.SH VERSION
.TP
This man page is current for @PACKAGE@-@VERSION@.

.SH SEE ALSO
.BR gprof(1),
.BR readprofile(1),
.BR "Intel IA32 Architecture Developer's Manual, Volume 3"

.SH COPYRIGHT
oprofile is Copyright (C) 1998-2001 University of Manchester, UK and John Levon.
figurine is released under the GNU General Public License, Version 2,
or (at your option) any later version.
.SH AUTHORS
John Levon <moz@compsoc.man.ac.uk>
