#   Autoconf script for oprofile
#
#   Copyright 1999 Olaf Titz <olaf@bigred.inka.de>
#   Adapted for oprofile
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version
#   2 of the License, or (at your option) any later version.
#

AC_REVISION($Id$)
AC_PREREQ(2.13)
AC_INIT(./op_user.h)

AC_CONFIG_HEADER(config.h)

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
PACKAGE=oprofile
VERSION=0.0.9cvs

dnl for the man page
DATE="`date '+%a %d %B %Y'`"
AC_SUBST(DATE)
 
dnl -- local macros -- 
 
dnl AX_MSG_RESULT_YN(a)
dnl results "yes" iff a==1, "no" else
AC_DEFUN(AX_MSG_RESULT_YN, [x=no
test "x$1" = "x1" && x=yes
AC_MSG_RESULT($x)])

dnl AX_COMPILE_OPTION(option, action-if-found, action-if-not-found)
dnl see if autoconf.h defines the option
AC_DEFUN(AX_COMPILE_OPTION, [
SAVE_CFLAGS=$CFLAGS
CFLAGS="$BKCFLAGS -I$KINC -O2 -D__KERNEL__"
AC_TRY_COMPILE( [#include <linux/config.h>],
[
#ifndef $1
break_me_hard(\\\);
#endif
],[$2],[$3],)
CFLAGS=$SAVE_CFLAGS
])

# FIXME - fucking autoconf ! how do I override the cached value ??? 
AC_ARG_WITH(cc,    [  --with-cc=<kgcc>             C compiler used to compiler kernel], CC=$withval)
AC_SUBST(CC)

AC_PROG_CC
test "$GCC" || AC_ERROR(You would not have much luck compiling kernel code with non-gcc...)
AC_PROG_CPP
AC_PROG_CXX
AC_CHECK_PROG(LD,ld,ld,)
test "$LD" || AC_ERROR(ld not found)

dnl  --- Find the Linux kernel, at least the headers ---
 
AC_SUBST(KSRC)
KSRC=/lib/modules/`uname -r`/build
AC_ARG_WITH(linux, [  --with-linux=dir             Path to Linux source tree], KSRC=$withval) 
KINC=$KSRC/include
AC_SUBST(KINC)
 
if test ! -f $KINC/linux/autoconf.h; then
  AC_MSG_ERROR(no suitably configured kernel include tree found)
fi

dnl  --- Get Linux kernel version and compile parameters ---

AC_SUBST(KVERS)
AC_MSG_CHECKING(for kernel version)
dnl it's like this to handle mandrake's fubar version.h - bug #471448
eval KVERS=`gcc -I$KINC -E -dM $KINC/linux/version.h | grep -w UTS_RELEASE | awk '{print $3}'`
AC_MSG_RESULT($KVERS)
case "$KVERS" in
2.2.*|2.4.*|2.5.*) ;;
*) AC_MSG_ERROR(Unsupported kernel version)
esac

AC_MSG_CHECKING("whether $CC accepts -mpreferred-stack-boundary=2")
SAVE_CFLAGS=$CFLAGS
CFLAGS="-mpreferred-stack-boundary=2 $CFLAGS"
AC_TRY_COMPILE(,,AC_MSG_RESULT("yes");BKCFLAGS="-mpreferred-stack-boundary=2 $BKCFLAGS",AC_MSG_RESULT("no"))
CFLAGS=$SAVE_CFLAGS

# FIXME: use config.h for the -D things ... 
AC_MSG_CHECKING("whether malloc attribute is understood")
SAVE_CFLAGS=$CFLAGS
CFLAGS="-Werror $CFLAGS"
AC_TRY_COMPILE(,[
void monkey() __attribute__((malloc));
],AC_MSG_RESULT("yes"); CFLAGS="$SAVE_CFLAGS -DMALLOC_OK", AC_MSG_RESULT("no"); CFLAGS="$SAVE_CFLAGS")
CFLAGS=$SAVE_CFLAGS 

AC_MSG_CHECKING("whether __builtin_expect is understood")
SAVE_CFLAGS=$CFLAGS
CFLAGS="-Werror $CFLAGS"
AC_TRY_LINK(,[
int i;
if (__builtin_expect(i, 0)) { }
],AC_MSG_RESULT("yes"); BKCFLAGS="$BKCFLAGS -DEXPECT_OK", AC_MSG_RESULT("no");)
CFLAGS=$SAVE_CFLAGS 
 
dnl AC_MSG_CHECKING("whether completion.h exists")
dnl if test -f $KINC/linux/completion.h; then
dnl   BKCFLAGS="$BKCFLAGS -DCOMPLETION_H"
dnl   AC_MSG_RESULT("yes")
dnl else
dnl   AC_MSG_RESULT("no")
dnl fi
 
AC_MSG_CHECKING(for hard_get_current())
HARD_GET_CURRENT=`gcc -I$KINC -E $KINC/asm/current.h | grep hard_get_current`
if test -z "$HARD_GET_CURRENT"; then
  AC_MSG_RESULT(no)
else
  AC_MSG_RESULT(yes)
  # hard_get_current() can't work for us...
  AC_MSG_ERROR(This kernel version is unsupported. Check oprofile bug tracker for more information.)
fi

AC_MSG_CHECKING(for x86 architecture)
AX_COMPILE_OPTION(CONFIG_X86,x86=1,x86=0)
# FIXME, recheck later needed for 2.2
AX_COMPILE_OPTION(CONFIG_X86_WP_WORKS_OK,x86=1,x86=x86)
AX_MSG_RESULT_YN($x86)
test "$x86" = 1 || AC_MSG_ERROR(Unsupported architecture)

AC_MSG_CHECKING(for SMP)
AX_COMPILE_OPTION(CONFIG_SMP,smp=1,smp=0)
AX_MSG_RESULT_YN($smp)

# FIXME 2.2 not already tested with modules version
AC_MSG_CHECKING(for versioned modules)
mv=0
AX_COMPILE_OPTION(CONFIG_MODVERSIONS,mv=1,mv=0)
AX_MSG_RESULT_YN($mv)
MODVERSIONS=""
test "$mv" = 1 && MODVERSIONS="-DMODVERSIONS -include $KINC/linux/modversions.h"
AC_SUBST(MODVERSIONS)

dnl when CONFIG_X86_LOCAL_APIC undef we miss many apic prototype. Unhopefully
dnl apic_read/write implementation have changed through kernel version. We must
dnl check before removing this stuff than taking impl from one kernel work
dnl also for the other
if test "$smp" = 0; then 
  AC_MSG_CHECKING(for local APIC)
  AX_COMPILE_OPTION(CONFIG_X86_LOCAL_APIC,apic=1,apic=0)
  AX_MSG_RESULT_YN($apic)
  dnl try to figure out when we really need that
  test "$apic" = 0 && AC_MSG_ERROR(local APIC not configured)
fi

dnl Rather to rely on linux version check the presence of specific features
dnl because it is no clear when some features has been introduced.

dnl AC_MSG_CHECKING(for asm/mpspec.h)
dnl if test -e "$KINC"/asm/mpspec.h; then
dnl   AC_MSG_RESULT("yes")
dnl   BKCFLAGS="-DHAVE_ASM_MPSPEC_H $BKCFLAGS"
dnl else
dnl   AC_MSG_RESULT("no")
dnl fi

dnl AC_MSG_CHECKING(for asm/apic.h)
dnl if test -e "$KINC"/asm/apic.h; then
dnl   AC_MSG_RESULT("yes")
dnl   BKCFLAGS="-DHAVE_ASM_APIC_H $BKCFLAGS"
dnl else
dnl   AC_MSG_RESULT("no")
dnl fi

dnl We rely on pte_page returning a struct * not an ulong
dnl AC_MSG_CHECKING(for invalid pte_page prototype)
dnl SAVE_CFLAGS=$CFLAGS
dnl CFLAGS="$BKCFLAGS -I$KINC -O2 -D__KERNEL__ -Werror -Wall"
dnl AC_TRY_COMPILE( 
dnl [
dnl #include <linux/mm.h>
dnl #include <linux/pagemap.h>
dnl #include <asm/pgtable.h>
dnl ],
dnl [ if (page_address(pte_page(*(pte_t*)0))) {} ],
dnl   AC_MSG_RESULT("no"),
dnl   AC_MSG_RESULT("yes");BKCFLAGS="-DHAVE_INVALID_PTE_PAGE_PROTO $BKCFLAGS")
dnl CFLAGS=$SAVE_CFLAGS

dnl virt_to_page is not always present
dnl AC_MSG_CHECKING(for virt_to_page)
dnl SAVE_CFLAGS=$CFLAGS
dnl CFLAGS="$BKCFLAGS -I$KINC -O2 -D__KERNEL__ -Werror -Wall"
dnl AC_TRY_COMPILE( 
dnl   [
dnl   #include <linux/mm.h>
dnl   #include <asm/page.h>
dnl   ],
dnl   [ if (virt_to_page(0)) {} ],
dnl   AC_MSG_RESULT("yes");BKCFLAGS="-DHAVE_VIRT_TO_PAGE $BKCFLAGS",
dnl   AC_MSG_RESULT("no"))
dnl CFLAGS=$SAVE_CFLAGS

dnl linux 2.2 have no vmalloc_32
dnl AC_MSG_CHECKING(for vmalloc_32)
dnl SAVE_CFLAGS=$CFLAGS
dnl CFLAGS="$BKCFLAGS -I$KINC -O2 -D__KERNEL__ -Werror -Wall"
dnl AC_TRY_COMPILE( 
dnl   [ #include <linux/vmalloc.h> ],
dnl   [ if (vmalloc_32(0)) {} ],
dnl   AC_MSG_RESULT("yes");BKCFLAGS="-DHAVE_VMALLOC_32 $BKCFLAGS",
dnl   AC_MSG_RESULT("no"))
dnl CFLAGS=$SAVE_CFLAGS

dnl linux 2.2 have no cpu_number_map on UP kernel
dnl AC_MSG_CHECKING(for cpu_number_map)
dnl SAVE_CFLAGS=$CFLAGS
dnl CFLAGS="$BKCFLAGS -I$KINC -O2 -D__KERNEL__ -Werror -Wall"
dnl AC_TRY_COMPILE( 
dnl   [ #include <linux/smp.h> ],
dnl   [ if (cpu_number_map(0)) {} ],
dnl   AC_MSG_RESULT("yes");BKCFLAGS="-DHAVE_CPU_NUMBER_MAP $BKCFLAGS",
dnl   AC_MSG_RESULT("no"))
dnl CFLAGS=$SAVE_CFLAGS

dnl linux 2.2 need -D__SMP__, preferable to pass as compile option, so we
dnl include <linux/smp.h> without worrying to include the compat file first
if test "$smp" = 1; then
  AC_MSG_CHECKING(for -D__SMP__)
  dnl look like a AX_CHECK_LINUX_VERSION(x,y,z);
  SAVE_CFLAGS=$CFLAGS
  CFLAGS="$BKCFLAGS -I$KINC -O2 -D__KERNEL__ -Werror -Wall"
  AC_TRY_COMPILE( 
    [ #include <linux/version.h> ],
    [ 
      #if LINUX_VERSION_CODE < LINUX_VERSION(2,4,0)
	break_me_hard(\\\);
      #endif
    ],
    AC_MSG_RESULT("no"),
    AC_MSG_RESULT("yes");BKCFLAGS="-D__SMP__ $BKCFLAGS")
  CFLAGS=$SAVE_CFLAGS
fi

dnl check for the new mmap syscall
dnl AC_MSG_CHECKING(for new mmap)
dnl SAVE_CFLAGS=$CFLAGS
dnl CFLAGS="$BKCFLAGS -I$KINC -O2 -D__KERNEL__ -Werror -Wall"
dnl AC_TRY_COMPILE( 
dnl   [ #include <linux/unistd.h> ],
dnl   [ if (__NR_mmap2) {} ],
dnl   AC_MSG_RESULT("yes");BKCFLAGS="-DHAVE_MMAP2 $BKCFLAGS",
dnl   AC_MSG_RESULT("no"))
dnl CFLAGS=$SAVE_CFLAGS

dnl in 2.2 only one object file must be compiled w/o __NO_VERSION__ look at
dnl further comment in module/Makefile.in. Note than treating this in compat.h
dnl means than compat.h must be include before any #include <>, for now treat
dnl on cmd line FIXME
AC_MSG_CHECKING(for __NO_VERSION__)
if grep __NO_VERSION__ $KSRC/include/linux/module.h; then
  AC_MSG_RESULT("yes")
  NO_MODULE_VERSION="-D__NO_VERSION__"
else
  AC_MSG_RESULT("no")
fi
AC_SUBST(NO_MODULE_VERSION)

dnl this is probably not enough precise and must broken in several little test
dnl grep for the use HAVE_MOUNT_CROSS_POINT in source
dnl AC_MSG_CHECKING(for vfs support of cross mount point)
dnl SAVE_CFLAGS=$CFLAGS
dnl CFLAGS="$BKCFLAGS -I$KINC -O2 -D__KERNEL__ -Werror -Wall"
dnl AC_TRY_COMPILE( 
dnl   [ #include <linux/fs.h> ],
dnl  [ if (((struct vfsmount *)0)->mnt_root) {} ],
dnl   AC_MSG_RESULT("yes");BKCFLAGS="-DHAVE_CROSS_MOUNT_POINT $BKCFLAGS",
dnl   AC_MSG_RESULT("no"))
dnl CFLAGS=$SAVE_CFLAGS

dnl AC_MSG_CHECKING(for file_operations->owner)
dnl SAVE_CFLAGS=$CFLAGS
dnl CFLAGS="$BKCFLAGS -I$KINC -O2 -D__KERNEL__ -Werror -Wall"
dnl AC_TRY_COMPILE( 
dnl   [ #include <linux/fs.h> ],
dnl   [ if (((struct file_operations *)0)->owner) {} ],
dnl   AC_MSG_RESULT("yes");BKCFLAGS="-DHAVE_FILE_OPERATIONS_OWNER $BKCFLAGS",
dnl   AC_MSG_RESULT("no"))
dnl CFLAGS=$SAVE_CFLAGS

dnl this do not check for a valid attribute aligned, I think it is always
dnl by the kernel than compiler support this attribute
dnl AC_MSG_CHECKING(for a working cache_aligned macro)
dnl SAVE_CFLAGS=$CFLAGS
dnl CFLAGS="$BKCFLAGS -I$KINC -O2 -D__KERNEL__ -Werror -Wall"
dnl AC_TRY_COMPILE( 
dnl   [ #include <linux/cache.h> ],
dnl   [ static int a __cacheline_aligned = 0; if (a) {} ],
dnl   AC_MSG_RESULT("yes");BKCFLAGS="-DHAVE_CACHE_LINE_ALIGNED $BKCFLAGS",
dnl   AC_MSG_RESULT("no"))
dnl CFLAGS=$SAVE_CFLAGS

dnl if some 2.2 can be supported w/o CONFIG_SMP we need to take care about 
dnl smp_call_function expanded to empty, workaround is
dnl #ifdef CONFIG_SMP #undef smp_call_function #define smp_call_function 0

AC_SUBST(KINC)
BKCFLAGS="-I$KINC $BKCFLAGS"
AC_SUBST(BKCFLAGS)

MODINSTALLDIR=/lib/modules/$KVERS
 
AC_ARG_WITH(module-dir,
[  --with-module-dir=dir        Path to module installation directory], MODINSTALLDIR=$withval)
AC_SUBST(MODINSTALLDIR)

dnl --- user space configuration ---

AC_ARG_WITH(extra-includes,
[  --with-extra-includes=DIR    add extra include paths],
  use_extra_includes="$withval",
  use_extra_includes=NO
)
if test -n "$use_extra_includes" && \
        test "$use_extra_includes" != "NO"; then
  ac_save_ifs=$IFS
  IFS=':'
  for dir in $use_extra_includes; do
    extra_includes="$extra_includes -I$dir"
  done
  IFS=$ac_save_ifs
  CPPFLAGS="$CPPFLAGS $extra_includes"
fi

AC_ARG_WITH(extra-libs,
[  --with-extra-libs=DIR        add extra library paths],
  use_extra_libs=$withval,
  use_extra_libs=NO
)
if test -n "$use_extra_libs" && \
        test "$use_extra_libs" != "NO"; then
   ac_save_ifs=$IFS
   IFS=':'
   for dir in $use_extra_libs; do
     extra_libraries="$extra_libraries -L$dir"
   done
   IFS=$ac_save_ifs
fi

AC_SUBST(extra_includes)
AC_SUBST(extra_libraries)

AC_CHECK_LIB(popt, poptGetContext,, AC_MSG_ERROR(popt library not found))
AC_CHECK_LIB(dl, dlopen,, AC_MSG_ERROR(dl library not found))
AC_CHECK_LIB(iberty, cplus_demangle,, AC_MSG_ERROR(liberty library not found))
AC_CHECK_LIB(bfd, bfd_openr,, AC_MSG_ERROR(bfd library not found))

# C++ tests
 
AC_LANG_CPLUSPLUS

AC_MSG_CHECKING("popt prototype")
SAVE_CXXFLAGS=$CXXFLAGS
CXXFLAGS="-Werror $CXXFLAGS"
AC_TRY_COMPILE([#include <popt.h>],
[
int c; char **v;
poptGetContext(0, c, v, 0, 0);
],
AC_MSG_RESULT([takes char **]); CXXFLAGS="$SAVE_CXXFLAGS";,
AC_MSG_RESULT([takes const char **]); CFLAGS="$CFLAGS -DCONST_POPT"; CXXFLAGS="$SAVE_CXXFLAGS -DCONST_POPT")

AC_MSG_CHECKING("whether to use included sstream")
AC_TRY_COMPILE([#include <sstream>], [], 
AC_MSG_RESULT([no]);,
AC_MSG_RESULT([yes]); CXXFLAGS="$CXXFLAGS -I../include")

dnl some distro have a libiberty.a but does not have a libiberty.h
AC_CHECK_HEADERS(libiberty.h)
AC_CHECK_FUNCS(xcalloc)

dnl bfd.h pre 1998 check only for gnu 2.xx series, so gcc 3.0 can't compile it
AC_MSG_CHECKING("whether bfd define bool")
AC_TRY_COMPILE([#include <bfd.h>], [], 
AC_MSG_RESULT([no]);,
AC_MSG_RESULT([yes]); BFD_CXXFLAGS="-DTRUE_FALSE_ALREADY_DEFINED")
AC_SUBST(BFD_CXXFLAGS)

AC_PATH_XTRA 
LIBS="$X_PRE_LIBS $LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"
QT2_DO_IT_ALL
 
# do NOT put tests here, they will fail in the case X is not installed !
 
AC_OUTPUT(Makefile events/Makefile util/Makefile module/Makefile dae/Makefile doc/Makefile doc/oprofile.1 pp/Makefile gui/Makefile gui/ui/Makefile Rules.make version.h)

if test "$have_qt2" != "yes"; then
	echo "Warning: Qt2 not found; no GUI will be built"
fi
